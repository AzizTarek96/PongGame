
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002702  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00002702  00002796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c8  008000c8  000027fe  2**0
                  ALLOC
  3 .stab         00001e84  00000000  00000000  00002800  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d95  00000000  00000000  00004684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005419  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005559  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000056c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007312  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009399  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 0c 	call	0x1900	; 0x1900 <main>
      8a:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e9       	ldi	r26, 0x97	; 151
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e9       	ldi	r24, 0x97	; 151
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include"CLCD_config.h"



void CLCD_voidSendCommand (u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	65 e0       	ldi	r22, 0x05	; 5
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 cb 0a 	call	0x1596	; 0x1596 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	67 e0       	ldi	r22, 0x07	; 7
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:
void CLCD_voidSendData (u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	65 e0       	ldi	r22, 0x05	; 5
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	67 e0       	ldi	r22, 0x07	; 7
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	67 e0       	ldi	r22, 0x07	; 7
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:
void CLCD_voidInit     (void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

	CLCD_voidSendCommand (0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand (0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand (1);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidGoToXY>:
void CLCD_voidGoToXY (u8 Copy_u8XPos , u8 Copy_u8YPos)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_voidGoToXY+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	8a 83       	std	Y+2, r24	; 0x02
     ee8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMAddress;

	Local_u8DDRAMAddress=0x40*Copy_u8YPos+Copy_u8XPos;
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	00 24       	eor	r0, r0
     ef2:	96 95       	lsr	r25
     ef4:	87 95       	ror	r24
     ef6:	07 94       	ror	r0
     ef8:	96 95       	lsr	r25
     efa:	87 95       	ror	r24
     efc:	07 94       	ror	r0
     efe:	98 2f       	mov	r25, r24
     f00:	80 2d       	mov	r24, r0
     f02:	98 2f       	mov	r25, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	89 0f       	add	r24, r25
     f08:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8DDRAMAddress+(1<<7));
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	80 58       	subi	r24, 0x80	; 128
     f0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	27 97       	sbiw	r28, 0x07	; 7
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	9c 83       	std	Y+4, r25	; 0x04
     f34:	8b 83       	std	Y+3, r24	; 0x03
     f36:	6d 83       	std	Y+5, r22	; 0x05
     f38:	4e 83       	std	Y+6, r20	; 0x06
     f3a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress,Local_u8Counter;

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	80 5c       	subi	r24, 0xC0	; 192
     f54:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
     f58:	19 82       	std	Y+1, r1	; 0x01
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	fc 01       	movw	r30, r24
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	80 81       	ld	r24, Z
     f6e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	78 f3       	brcs	.-34     	; 0xf5c <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	6f 81       	ldd	r22, Y+7	; 0x07
     f82:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

}
     f8c:	27 96       	adiw	r28, 0x07	; 7
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <CLCD_voidWriteString>:




void CLCD_voidWriteString(u8* Local_u8String)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <CLCD_voidWriteString+0x6>
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	9b 83       	std	Y+3, r25	; 0x03
     fac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index = 0;
     fae:	19 82       	std	Y+1, r1	; 0x01
     fb0:	0e c0       	rjmp	.+28     	; 0xfce <CLCD_voidWriteString+0x30>
	while(Local_u8String[Local_u8Index] != '\0')
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	9b 81       	ldd	r25, Y+3	; 0x03
     fbc:	fc 01       	movw	r30, r24
     fbe:	e2 0f       	add	r30, r18
     fc0:	f3 1f       	adc	r31, r19
     fc2:	80 81       	ld	r24, Z
     fc4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Index++;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	89 83       	std	Y+1, r24	; 0x01


void CLCD_voidWriteString(u8* Local_u8String)
{
	u8 Local_u8Index = 0;
	while(Local_u8String[Local_u8Index] != '\0')
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	fc 01       	movw	r30, r24
     fda:	e2 0f       	add	r30, r18
     fdc:	f3 1f       	adc	r31, r19
     fde:	80 81       	ld	r24, Z
     fe0:	88 23       	and	r24, r24
     fe2:	39 f7       	brne	.-50     	; 0xfb2 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
		Local_u8Index++;
	}
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <ClCD_voidWriteInteger>:

void ClCD_voidWriteInteger(u16 Local_u16Number)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	67 97       	sbiw	r28, 0x17	; 23
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	9f 8b       	std	Y+23, r25	; 0x17
    1006:	8e 8b       	std	Y+22, r24	; 0x16
	u16 Local_u16NumberArr[10]={0};
    1008:	84 e1       	ldi	r24, 0x14	; 20
    100a:	fe 01       	movw	r30, r28
    100c:	32 96       	adiw	r30, 0x02	; 2
    100e:	df 01       	movw	r26, r30
    1010:	98 2f       	mov	r25, r24
    1012:	1d 92       	st	X+, r1
    1014:	9a 95       	dec	r25
    1016:	e9 f7       	brne	.-6      	; 0x1012 <ClCD_voidWriteInteger+0x22>
	u8 Local_u8Counter=0;
    1018:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u16Number==0)
    101a:	8e 89       	ldd	r24, Y+22	; 0x16
    101c:	9f 89       	ldd	r25, Y+23	; 0x17
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	49 f5       	brne	.+82     	; 0x1074 <ClCD_voidWriteInteger+0x84>
	{
		CLCD_voidSendData('0');
    1022:	80 e3       	ldi	r24, 0x30	; 48
    1024:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1028:	41 c0       	rjmp	.+130    	; 0x10ac <ClCD_voidWriteInteger+0xbc>
		return;
	}
	while(Local_u16Number != 0)
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	e8 2f       	mov	r30, r24
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	8e 89       	ldd	r24, Y+22	; 0x16
    1032:	9f 89       	ldd	r25, Y+23	; 0x17
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	b9 01       	movw	r22, r18
    103a:	0e 94 34 13 	call	0x2668	; 0x2668 <__udivmodhi4>
    103e:	ac 01       	movw	r20, r24
    1040:	40 5d       	subi	r20, 0xD0	; 208
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	9f 01       	movw	r18, r30
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	fc 01       	movw	r30, r24
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	51 83       	std	Z+1, r21	; 0x01
    1058:	40 83       	st	Z, r20
		Local_u16Number=Local_u16Number/10;
    105a:	8e 89       	ldd	r24, Y+22	; 0x16
    105c:	9f 89       	ldd	r25, Y+23	; 0x17
    105e:	2a e0       	ldi	r18, 0x0A	; 10
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	b9 01       	movw	r22, r18
    1064:	0e 94 34 13 	call	0x2668	; 0x2668 <__udivmodhi4>
    1068:	cb 01       	movw	r24, r22
    106a:	9f 8b       	std	Y+23, r25	; 0x17
    106c:	8e 8b       	std	Y+22, r24	; 0x16
		Local_u8Counter++;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u16Number==0)
	{
		CLCD_voidSendData('0');
		return;
	}
	while(Local_u16Number != 0)
    1074:	8e 89       	ldd	r24, Y+22	; 0x16
    1076:	9f 89       	ldd	r25, Y+23	; 0x17
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	b9 f6       	brne	.-82     	; 0x102a <ClCD_voidWriteInteger+0x3a>
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <ClCD_voidWriteInteger+0xb6>
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	9c 01       	movw	r18, r24
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	82 0f       	add	r24, r18
    1092:	93 1f       	adc	r25, r19
    1094:	fc 01       	movw	r30, r24
    1096:	31 96       	adiw	r30, 0x01	; 1
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Counter--;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	81 50       	subi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 23       	and	r24, r24
    10aa:	49 f7       	brne	.-46     	; 0x107e <ClCD_voidWriteInteger+0x8e>
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
		Local_u8Counter--;
	}

}
    10ac:	67 96       	adiw	r28, 0x17	; 23
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection  (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Direction)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	28 97       	sbiw	r28, 0x08	; 8
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	6b 83       	std	Y+3, r22	; 0x03
    10d6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    10d8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 30       	cpi	r24, 0x08	; 8
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <DIO_u8SetPinDirection+0x24>
    10e0:	f4 c0       	rjmp	.+488    	; 0x12ca <DIO_u8SetPinDirection+0x20c>
	{
		if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <DIO_u8SetPinDirection+0x2c>
    10e8:	72 c0       	rjmp	.+228    	; 0x11ce <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	38 87       	std	Y+8, r19	; 0x08
    10f2:	2f 83       	std	Y+7, r18	; 0x07
    10f4:	8f 81       	ldd	r24, Y+7	; 0x07
    10f6:	98 85       	ldd	r25, Y+8	; 0x08
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	49 f1       	breq	.+82     	; 0x1150 <DIO_u8SetPinDirection+0x92>
    10fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1100:	38 85       	ldd	r19, Y+8	; 0x08
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	2c f4       	brge	.+10     	; 0x1112 <DIO_u8SetPinDirection+0x54>
    1108:	8f 81       	ldd	r24, Y+7	; 0x07
    110a:	98 85       	ldd	r25, Y+8	; 0x08
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	61 f0       	breq	.+24     	; 0x1128 <DIO_u8SetPinDirection+0x6a>
    1110:	5b c0       	rjmp	.+182    	; 0x11c8 <DIO_u8SetPinDirection+0x10a>
    1112:	2f 81       	ldd	r18, Y+7	; 0x07
    1114:	38 85       	ldd	r19, Y+8	; 0x08
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	71 f1       	breq	.+92     	; 0x1178 <DIO_u8SetPinDirection+0xba>
    111c:	8f 81       	ldd	r24, Y+7	; 0x07
    111e:	98 85       	ldd	r25, Y+8	; 0x08
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	e9 f1       	breq	.+122    	; 0x11a0 <DIO_u8SetPinDirection+0xe2>
    1126:	50 c0       	rjmp	.+160    	; 0x11c8 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1128:	aa e3       	ldi	r26, 0x3A	; 58
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ea e3       	ldi	r30, 0x3A	; 58
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8SetPinDirection+0x88>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_u8SetPinDirection+0x84>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	bf c0       	rjmp	.+382    	; 0x12ce <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1150:	a7 e3       	ldi	r26, 0x37	; 55
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e7 e3       	ldi	r30, 0x37	; 55
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinDirection+0xb0>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinDirection+0xac>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	ab c0       	rjmp	.+342    	; 0x12ce <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1178:	a4 e3       	ldi	r26, 0x34	; 52
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e4 e3       	ldi	r30, 0x34	; 52
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_u8SetPinDirection+0xd8>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_u8SetPinDirection+0xd4>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	97 c0       	rjmp	.+302    	; 0x12ce <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    11a0:	a1 e3       	ldi	r26, 0x31	; 49
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e1 e3       	ldi	r30, 0x31	; 49
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_u8SetPinDirection+0x100>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_u8SetPinDirection+0xfc>
    11c2:	84 2b       	or	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	83 c0       	rjmp	.+262    	; 0x12ce <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	80 c0       	rjmp	.+256    	; 0x12ce <DIO_u8SetPinDirection+0x210>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPUT)
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	88 23       	and	r24, r24
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <DIO_u8SetPinDirection+0x118>
    11d4:	77 c0       	rjmp	.+238    	; 0x12c4 <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3e 83       	std	Y+6, r19	; 0x06
    11de:	2d 83       	std	Y+5, r18	; 0x05
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	59 f1       	breq	.+86     	; 0x1240 <DIO_u8SetPinDirection+0x182>
    11ea:	2d 81       	ldd	r18, Y+5	; 0x05
    11ec:	3e 81       	ldd	r19, Y+6	; 0x06
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	2c f4       	brge	.+10     	; 0x11fe <DIO_u8SetPinDirection+0x140>
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	69 f0       	breq	.+26     	; 0x1216 <DIO_u8SetPinDirection+0x158>
    11fc:	60 c0       	rjmp	.+192    	; 0x12be <DIO_u8SetPinDirection+0x200>
    11fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1200:	3e 81       	ldd	r19, Y+6	; 0x06
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	89 f1       	breq	.+98     	; 0x126a <DIO_u8SetPinDirection+0x1ac>
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <DIO_u8SetPinDirection+0x156>
    1212:	40 c0       	rjmp	.+128    	; 0x1294 <DIO_u8SetPinDirection+0x1d6>
    1214:	54 c0       	rjmp	.+168    	; 0x12be <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1216:	aa e3       	ldi	r26, 0x3A	; 58
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ea e3       	ldi	r30, 0x3A	; 58
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8SetPinDirection+0x176>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8SetPinDirection+0x172>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	47 c0       	rjmp	.+142    	; 0x12ce <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1240:	a7 e3       	ldi	r26, 0x37	; 55
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e7 e3       	ldi	r30, 0x37	; 55
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_u8SetPinDirection+0x1a0>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_u8SetPinDirection+0x19c>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	32 c0       	rjmp	.+100    	; 0x12ce <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    126a:	a4 e3       	ldi	r26, 0x34	; 52
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e4 e3       	ldi	r30, 0x34	; 52
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8SetPinDirection+0x1ca>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8SetPinDirection+0x1c6>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	1d c0       	rjmp	.+58     	; 0x12ce <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    1294:	a1 e3       	ldi	r26, 0x31	; 49
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e1 e3       	ldi	r30, 0x31	; 49
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_u8SetPinDirection+0x1f4>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_u8SetPinDirection+0x1f0>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d0:	28 96       	adiw	r28, 0x08	; 8
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_u8SetPortDirection+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DIO_u8SetPortDirection+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    12f4:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3d 83       	std	Y+5, r19	; 0x05
    12fe:	2c 83       	std	Y+4, r18	; 0x04
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	91 05       	cpc	r25, r1
    1308:	d1 f0       	breq	.+52     	; 0x133e <DIO_u8SetPortDirection+0x5c>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	2c f4       	brge	.+10     	; 0x131e <DIO_u8SetPortDirection+0x3c>
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	61 f0       	breq	.+24     	; 0x1334 <DIO_u8SetPortDirection+0x52>
    131c:	1f c0       	rjmp	.+62     	; 0x135c <DIO_u8SetPortDirection+0x7a>
    131e:	2c 81       	ldd	r18, Y+4	; 0x04
    1320:	3d 81       	ldd	r19, Y+5	; 0x05
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	81 f0       	breq	.+32     	; 0x1348 <DIO_u8SetPortDirection+0x66>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	91 05       	cpc	r25, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_u8SetPortDirection+0x70>
    1332:	14 c0       	rjmp	.+40     	; 0x135c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
    1334:	ea e3       	ldi	r30, 0x3A	; 58
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	80 83       	st	Z, r24
    133c:	11 c0       	rjmp	.+34     	; 0x1360 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
    133e:	e7 e3       	ldi	r30, 0x37	; 55
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	80 83       	st	Z, r24
    1346:	0c c0       	rjmp	.+24     	; 0x1360 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
    1348:	e4 e3       	ldi	r30, 0x34	; 52
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	80 83       	st	Z, r24
    1350:	07 c0       	rjmp	.+14     	; 0x1360 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
    1352:	e1 e3       	ldi	r30, 0x31	; 49
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState=NOK;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	28 97       	sbiw	r28, 0x08	; 8
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	6b 83       	std	Y+3, r22	; 0x03
    138a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    138c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	88 30       	cpi	r24, 0x08	; 8
    1392:	08 f0       	brcs	.+2      	; 0x1396 <DIO_u8SetPinValue+0x24>
    1394:	f4 c0       	rjmp	.+488    	; 0x157e <DIO_u8SetPinValue+0x20c>
	{
		if (Copy_u8Value==DIO_u8PIN_HIGH)
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	09 f0       	breq	.+2      	; 0x139e <DIO_u8SetPinValue+0x2c>
    139c:	72 c0       	rjmp	.+228    	; 0x1482 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	38 87       	std	Y+8, r19	; 0x08
    13a6:	2f 83       	std	Y+7, r18	; 0x07
    13a8:	8f 81       	ldd	r24, Y+7	; 0x07
    13aa:	98 85       	ldd	r25, Y+8	; 0x08
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	49 f1       	breq	.+82     	; 0x1404 <DIO_u8SetPinValue+0x92>
    13b2:	2f 81       	ldd	r18, Y+7	; 0x07
    13b4:	38 85       	ldd	r19, Y+8	; 0x08
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <DIO_u8SetPinValue+0x54>
    13bc:	8f 81       	ldd	r24, Y+7	; 0x07
    13be:	98 85       	ldd	r25, Y+8	; 0x08
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	61 f0       	breq	.+24     	; 0x13dc <DIO_u8SetPinValue+0x6a>
    13c4:	5b c0       	rjmp	.+182    	; 0x147c <DIO_u8SetPinValue+0x10a>
    13c6:	2f 81       	ldd	r18, Y+7	; 0x07
    13c8:	38 85       	ldd	r19, Y+8	; 0x08
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	71 f1       	breq	.+92     	; 0x142c <DIO_u8SetPinValue+0xba>
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	e9 f1       	breq	.+122    	; 0x1454 <DIO_u8SetPinValue+0xe2>
    13da:	50 c0       	rjmp	.+160    	; 0x147c <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    13dc:	ab e3       	ldi	r26, 0x3B	; 59
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	eb e3       	ldi	r30, 0x3B	; 59
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_u8SetPinValue+0x88>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_u8SetPinValue+0x84>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	bf c0       	rjmp	.+382    	; 0x1582 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1404:	a8 e3       	ldi	r26, 0x38	; 56
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e3       	ldi	r30, 0x38	; 56
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8SetPinValue+0xb0>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_u8SetPinValue+0xac>
    1426:	84 2b       	or	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	ab c0       	rjmp	.+342    	; 0x1582 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    142c:	a5 e3       	ldi	r26, 0x35	; 53
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e3       	ldi	r30, 0x35	; 53
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_u8SetPinValue+0xd8>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_u8SetPinValue+0xd4>
    144e:	84 2b       	or	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	97 c0       	rjmp	.+302    	; 0x1582 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1454:	a2 e3       	ldi	r26, 0x32	; 50
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e2 e3       	ldi	r30, 0x32	; 50
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_u8SetPinValue+0x100>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_u8SetPinValue+0xfc>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	83 c0       	rjmp	.+262    	; 0x1582 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	80 c0       	rjmp	.+256    	; 0x1582 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_LOW)
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	88 23       	and	r24, r24
    1486:	09 f0       	breq	.+2      	; 0x148a <DIO_u8SetPinValue+0x118>
    1488:	77 c0       	rjmp	.+238    	; 0x1578 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	2d 83       	std	Y+5, r18	; 0x05
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	91 05       	cpc	r25, r1
    149c:	59 f1       	breq	.+86     	; 0x14f4 <DIO_u8SetPinValue+0x182>
    149e:	2d 81       	ldd	r18, Y+5	; 0x05
    14a0:	3e 81       	ldd	r19, Y+6	; 0x06
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <DIO_u8SetPinValue+0x140>
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	69 f0       	breq	.+26     	; 0x14ca <DIO_u8SetPinValue+0x158>
    14b0:	60 c0       	rjmp	.+192    	; 0x1572 <DIO_u8SetPinValue+0x200>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	89 f1       	breq	.+98     	; 0x151e <DIO_u8SetPinValue+0x1ac>
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <DIO_u8SetPinValue+0x156>
    14c6:	40 c0       	rjmp	.+128    	; 0x1548 <DIO_u8SetPinValue+0x1d6>
    14c8:	54 c0       	rjmp	.+168    	; 0x1572 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    14ca:	ab e3       	ldi	r26, 0x3B	; 59
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e3       	ldi	r30, 0x3B	; 59
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_u8SetPinValue+0x176>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <DIO_u8SetPinValue+0x172>
    14ec:	80 95       	com	r24
    14ee:	84 23       	and	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	47 c0       	rjmp	.+142    	; 0x1582 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    14f4:	a8 e3       	ldi	r26, 0x38	; 56
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e8 e3       	ldi	r30, 0x38	; 56
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8SetPinValue+0x1a0>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_u8SetPinValue+0x19c>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	32 c0       	rjmp	.+100    	; 0x1582 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    151e:	a5 e3       	ldi	r26, 0x35	; 53
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e3       	ldi	r30, 0x35	; 53
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_u8SetPinValue+0x1ca>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_u8SetPinValue+0x1c6>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	1d c0       	rjmp	.+58     	; 0x1582 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1548:	a2 e3       	ldi	r26, 0x32	; 50
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e2 e3       	ldi	r30, 0x32	; 50
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_u8SetPinValue+0x1f4>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_u8SetPinValue+0x1f0>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	05 c0       	rjmp	.+10     	; 0x1582 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
}
    1584:	28 96       	adiw	r28, 0x08	; 8
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue     (u8 Copy_u8Port, u8 Copy_u8Value)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <DIO_u8SetPortValue+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <DIO_u8SetPortValue+0x8>
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    15a8:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3d 83       	std	Y+5, r19	; 0x05
    15b2:	2c 83       	std	Y+4, r18	; 0x04
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	d1 f0       	breq	.+52     	; 0x15f2 <DIO_u8SetPortValue+0x5c>
    15be:	2c 81       	ldd	r18, Y+4	; 0x04
    15c0:	3d 81       	ldd	r19, Y+5	; 0x05
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <DIO_u8SetPortValue+0x3c>
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	61 f0       	breq	.+24     	; 0x15e8 <DIO_u8SetPortValue+0x52>
    15d0:	1f c0       	rjmp	.+62     	; 0x1610 <DIO_u8SetPortValue+0x7a>
    15d2:	2c 81       	ldd	r18, Y+4	; 0x04
    15d4:	3d 81       	ldd	r19, Y+5	; 0x05
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	81 f0       	breq	.+32     	; 0x15fc <DIO_u8SetPortValue+0x66>
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	81 f0       	breq	.+32     	; 0x1606 <DIO_u8SetPortValue+0x70>
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	80 83       	st	Z, r24
    15f0:	11 c0       	rjmp	.+34     	; 0x1614 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    15f2:	e8 e3       	ldi	r30, 0x38	; 56
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	80 83       	st	Z, r24
    15fa:	0c c0       	rjmp	.+24     	; 0x1614 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    15fc:	e5 e3       	ldi	r30, 0x35	; 53
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	80 83       	st	Z, r24
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    1606:	e2 e3       	ldi	r30, 0x32	; 50
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	80 83       	st	Z, r24
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState=NOK;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 *Copy_pu8Value)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	27 97       	sbiw	r28, 0x07	; 7
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	8a 83       	std	Y+2, r24	; 0x02
    163c:	6b 83       	std	Y+3, r22	; 0x03
    163e:	5d 83       	std	Y+5, r21	; 0x05
    1640:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    1642:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	09 f4       	brne	.+2      	; 0x164e <DIO_u8GetPinValue+0x28>
    164c:	77 c0       	rjmp	.+238    	; 0x173c <DIO_u8GetPinValue+0x116>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	88 30       	cpi	r24, 0x08	; 8
    1652:	08 f0       	brcs	.+2      	; 0x1656 <DIO_u8GetPinValue+0x30>
    1654:	73 c0       	rjmp	.+230    	; 0x173c <DIO_u8GetPinValue+0x116>
	{
		switch (Copy_u8Port)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3f 83       	std	Y+7, r19	; 0x07
    165e:	2e 83       	std	Y+6, r18	; 0x06
    1660:	4e 81       	ldd	r20, Y+6	; 0x06
    1662:	5f 81       	ldd	r21, Y+7	; 0x07
    1664:	41 30       	cpi	r20, 0x01	; 1
    1666:	51 05       	cpc	r21, r1
    1668:	59 f1       	breq	.+86     	; 0x16c0 <DIO_u8GetPinValue+0x9a>
    166a:	8e 81       	ldd	r24, Y+6	; 0x06
    166c:	9f 81       	ldd	r25, Y+7	; 0x07
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	91 05       	cpc	r25, r1
    1672:	34 f4       	brge	.+12     	; 0x1680 <DIO_u8GetPinValue+0x5a>
    1674:	2e 81       	ldd	r18, Y+6	; 0x06
    1676:	3f 81       	ldd	r19, Y+7	; 0x07
    1678:	21 15       	cp	r18, r1
    167a:	31 05       	cpc	r19, r1
    167c:	69 f0       	breq	.+26     	; 0x1698 <DIO_u8GetPinValue+0x72>
    167e:	5c c0       	rjmp	.+184    	; 0x1738 <DIO_u8GetPinValue+0x112>
    1680:	4e 81       	ldd	r20, Y+6	; 0x06
    1682:	5f 81       	ldd	r21, Y+7	; 0x07
    1684:	42 30       	cpi	r20, 0x02	; 2
    1686:	51 05       	cpc	r21, r1
    1688:	79 f1       	breq	.+94     	; 0x16e8 <DIO_u8GetPinValue+0xc2>
    168a:	8e 81       	ldd	r24, Y+6	; 0x06
    168c:	9f 81       	ldd	r25, Y+7	; 0x07
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <DIO_u8GetPinValue+0x70>
    1694:	3d c0       	rjmp	.+122    	; 0x1710 <DIO_u8GetPinValue+0xea>
    1696:	50 c0       	rjmp	.+160    	; 0x1738 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1698:	e9 e3       	ldi	r30, 0x39	; 57
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a9 01       	movw	r20, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8GetPinValue+0x8a>
    16ac:	55 95       	asr	r21
    16ae:	47 95       	ror	r20
    16b0:	8a 95       	dec	r24
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8GetPinValue+0x86>
    16b4:	ca 01       	movw	r24, r20
    16b6:	81 70       	andi	r24, 0x01	; 1
    16b8:	ec 81       	ldd	r30, Y+4	; 0x04
    16ba:	fd 81       	ldd	r31, Y+5	; 0x05
    16bc:	80 83       	st	Z, r24
    16be:	3e c0       	rjmp	.+124    	; 0x173c <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    16c0:	e6 e3       	ldi	r30, 0x36	; 54
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a9 01       	movw	r20, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_u8GetPinValue+0xb2>
    16d4:	55 95       	asr	r21
    16d6:	47 95       	ror	r20
    16d8:	8a 95       	dec	r24
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_u8GetPinValue+0xae>
    16dc:	ca 01       	movw	r24, r20
    16de:	81 70       	andi	r24, 0x01	; 1
    16e0:	ec 81       	ldd	r30, Y+4	; 0x04
    16e2:	fd 81       	ldd	r31, Y+5	; 0x05
    16e4:	80 83       	st	Z, r24
    16e6:	2a c0       	rjmp	.+84     	; 0x173c <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    16e8:	e3 e3       	ldi	r30, 0x33	; 51
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a9 01       	movw	r20, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_u8GetPinValue+0xda>
    16fc:	55 95       	asr	r21
    16fe:	47 95       	ror	r20
    1700:	8a 95       	dec	r24
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_u8GetPinValue+0xd6>
    1704:	ca 01       	movw	r24, r20
    1706:	81 70       	andi	r24, 0x01	; 1
    1708:	ec 81       	ldd	r30, Y+4	; 0x04
    170a:	fd 81       	ldd	r31, Y+5	; 0x05
    170c:	80 83       	st	Z, r24
    170e:	16 c0       	rjmp	.+44     	; 0x173c <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1710:	e0 e3       	ldi	r30, 0x30	; 48
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8GetPinValue+0x102>
    1724:	55 95       	asr	r21
    1726:	47 95       	ror	r20
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8GetPinValue+0xfe>
    172c:	ca 01       	movw	r24, r20
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	ec 81       	ldd	r30, Y+4	; 0x04
    1732:	fd 81       	ldd	r31, Y+5	; 0x05
    1734:	80 83       	st	Z, r24
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_u8GetPinValue+0x116>
		default : Local_u8ErrorState=NOK;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState ;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
}
    173e:	27 96       	adiw	r28, 0x07	; 7
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	a2 97       	sbiw	r28, 0x22	; 34
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColIdx , Local_u8RowIdx , Local_u8PressedKey=NO_PRESSED_KEY,Local_u8PinState;
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_KPDArr[ROW_NUMBER][COULMN_NUMBER]=KPD_BUTTONS_VAL;
    1768:	ce 01       	movw	r24, r28
    176a:	05 96       	adiw	r24, 0x05	; 5
    176c:	9f 8f       	std	Y+31, r25	; 0x1f
    176e:	8e 8f       	std	Y+30, r24	; 0x1e
    1770:	e8 eb       	ldi	r30, 0xB8	; 184
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	f9 a3       	std	Y+33, r31	; 0x21
    1776:	e8 a3       	std	Y+32, r30	; 0x20
    1778:	f0 e1       	ldi	r31, 0x10	; 16
    177a:	fa a3       	std	Y+34, r31	; 0x22
    177c:	e8 a1       	ldd	r30, Y+32	; 0x20
    177e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1780:	00 80       	ld	r0, Z
    1782:	88 a1       	ldd	r24, Y+32	; 0x20
    1784:	99 a1       	ldd	r25, Y+33	; 0x21
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	99 a3       	std	Y+33, r25	; 0x21
    178a:	88 a3       	std	Y+32, r24	; 0x20
    178c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    178e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1790:	00 82       	st	Z, r0
    1792:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1794:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	9f 8f       	std	Y+31, r25	; 0x1f
    179a:	8e 8f       	std	Y+30, r24	; 0x1e
    179c:	9a a1       	ldd	r25, Y+34	; 0x22
    179e:	91 50       	subi	r25, 0x01	; 1
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	ea a1       	ldd	r30, Y+34	; 0x22
    17a4:	ee 23       	and	r30, r30
    17a6:	51 f7       	brne	.-44     	; 0x177c <KPD_u8GetPressedKey+0x2c>
	u8 Local_COLArr[COULMN_NUMBER]={COULMN_PIN0,COULMN_PIN1,COULMN_PIN2,COULMN_PIN3};
    17a8:	1d 8a       	std	Y+21, r1	; 0x15
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	8e 8b       	std	Y+22, r24	; 0x16
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	8f 8b       	std	Y+23, r24	; 0x17
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_ROWArr[ROW_NUMBER]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	89 8f       	std	Y+25, r24	; 0x19
    17ba:	85 e0       	ldi	r24, 0x05	; 5
    17bc:	8a 8f       	std	Y+26, r24	; 0x1a
    17be:	86 e0       	ldi	r24, 0x06	; 6
    17c0:	8b 8f       	std	Y+27, r24	; 0x1b
    17c2:	87 e0       	ldi	r24, 0x07	; 7
    17c4:	8c 8f       	std	Y+28, r24	; 0x1c

	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
    17c6:	1b 82       	std	Y+3, r1	; 0x03
    17c8:	68 c0       	rjmp	.+208    	; 0x189a <KPD_u8GetPressedKey+0x14a>
	{
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_LOW);
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	ce 01       	movw	r24, r28
    17d2:	45 96       	adiw	r24, 0x15	; 21
    17d4:	fc 01       	movw	r30, r24
    17d6:	e2 0f       	add	r30, r18
    17d8:	f3 1f       	adc	r31, r19
    17da:	90 81       	ld	r25, Z
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	69 2f       	mov	r22, r25
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>


		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUMBER;Local_u8RowIdx++)
    17e6:	1a 82       	std	Y+2, r1	; 0x02
    17e8:	43 c0       	rjmp	.+134    	; 0x1870 <KPD_u8GetPressedKey+0x120>
		{
			DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	ce 01       	movw	r24, r28
    17f2:	49 96       	adiw	r24, 0x19	; 25
    17f4:	fc 01       	movw	r30, r24
    17f6:	e2 0f       	add	r30, r18
    17f8:	f3 1f       	adc	r31, r19
    17fa:	90 81       	ld	r25, Z
    17fc:	9e 01       	movw	r18, r28
    17fe:	2c 5f       	subi	r18, 0xFC	; 252
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	69 2f       	mov	r22, r25
    1806:	a9 01       	movw	r20, r18
    1808:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_u8GetPinValue>


			if(Local_u8PinState==DIO_u8PIN_LOW)
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	88 23       	and	r24, r24
    1810:	61 f5       	brne	.+88     	; 0x186a <KPD_u8GetPressedKey+0x11a>
    1812:	11 c0       	rjmp	.+34     	; 0x1836 <KPD_u8GetPressedKey+0xe6>
			{
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	ce 01       	movw	r24, r28
    181c:	49 96       	adiw	r24, 0x19	; 25
    181e:	fc 01       	movw	r30, r24
    1820:	e2 0f       	add	r30, r18
    1822:	f3 1f       	adc	r31, r19
    1824:	90 81       	ld	r25, Z
    1826:	9e 01       	movw	r18, r28
    1828:	2c 5f       	subi	r18, 0xFC	; 252
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	69 2f       	mov	r22, r25
    1830:	a9 01       	movw	r20, r18
    1832:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);


			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				while(Local_u8PinState==DIO_u8PIN_LOW)
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	88 23       	and	r24, r24
    183a:	61 f3       	breq	.-40     	; 0x1814 <KPD_u8GetPressedKey+0xc4>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
				}
				Local_u8PressedKey=Local_KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	48 2f       	mov	r20, r24
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	22 0f       	add	r18, r18
    184e:	33 1f       	adc	r19, r19
    1850:	ce 01       	movw	r24, r28
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	82 0f       	add	r24, r18
    1856:	93 1f       	adc	r25, r19
    1858:	84 0f       	add	r24, r20
    185a:	95 1f       	adc	r25, r21
    185c:	fc 01       	movw	r30, r24
    185e:	34 96       	adiw	r30, 0x04	; 4
    1860:	80 81       	ld	r24, Z
    1862:	89 83       	std	Y+1, r24	; 0x01
				return Local_u8PressedKey;
    1864:	f9 81       	ldd	r31, Y+1	; 0x01
    1866:	fd 8f       	std	Y+29, r31	; 0x1d
    1868:	1e c0       	rjmp	.+60     	; 0x18a6 <KPD_u8GetPressedKey+0x156>
	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
	{
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_LOW);


		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUMBER;Local_u8RowIdx++)
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	8a 83       	std	Y+2, r24	; 0x02
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f4       	brcc	.+2      	; 0x1878 <KPD_u8GetPressedKey+0x128>
    1876:	b9 cf       	rjmp	.-142    	; 0x17ea <KPD_u8GetPressedKey+0x9a>
				}
				Local_u8PressedKey=Local_KPDArr[Local_u8RowIdx][Local_u8ColIdx];
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	ce 01       	movw	r24, r28
    1880:	45 96       	adiw	r24, 0x15	; 21
    1882:	fc 01       	movw	r30, r24
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	90 81       	ld	r25, Z
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	69 2f       	mov	r22, r25
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_u8SetPinValue>
	u8 Local_u8ColIdx , Local_u8RowIdx , Local_u8PressedKey=NO_PRESSED_KEY,Local_u8PinState;
	u8 Local_KPDArr[ROW_NUMBER][COULMN_NUMBER]=KPD_BUTTONS_VAL;
	u8 Local_COLArr[COULMN_NUMBER]={COULMN_PIN0,COULMN_PIN1,COULMN_PIN2,COULMN_PIN3};
	u8 Local_ROWArr[ROW_NUMBER]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};

	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	8b 83       	std	Y+3, r24	; 0x03
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <KPD_u8GetPressedKey+0x152>
    18a0:	94 cf       	rjmp	.-216    	; 0x17ca <KPD_u8GetPressedKey+0x7a>
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	8d 8f       	std	Y+29, r24	; 0x1d
    18a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    18a8:	a2 96       	adiw	r28, 0x22	; 34
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	DDRA= PORTA_DIR;
    18c2:	ea e3       	ldi	r30, 0x3A	; 58
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	80 83       	st	Z, r24
	DDRB= PORTB_DIR;
    18ca:	e7 e3       	ldi	r30, 0x37	; 55
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 ee       	ldi	r24, 0xE0	; 224
    18d0:	80 83       	st	Z, r24
	DDRC= PORTC_DIR;
    18d2:	e4 e3       	ldi	r30, 0x34	; 52
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8f e0       	ldi	r24, 0x0F	; 15
    18d8:	80 83       	st	Z, r24
	DDRD= PORTD_DIR;
    18da:	e1 e3       	ldi	r30, 0x31	; 49
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	10 82       	st	Z, r1
	
	PORTA=PORTA_INITIAL_VALUE;
    18e0:	eb e3       	ldi	r30, 0x3B	; 59
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	80 83       	st	Z, r24
	PORTD=PORTD_INITIAL_VALUE;
    18f4:	e2 e3       	ldi	r30, 0x32	; 50
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	10 82       	st	Z, r1
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <main>:
u8 PressedKey=0;
u8 Goal=0;
u8 Player1=0;
u8 Player2=0;
void main()
{
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	ce 57       	subi	r28, 0x7E	; 126
    190e:	d0 40       	sbci	r29, 0x00	; 0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    191a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <PORT_voidInit>
	CLCD_voidInit();
    191e:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	CLCD_voidWriteSpecialCharacter(Pad1,PadLeft,0,Pad1Y);
    1922:	20 91 c9 00 	lds	r18, 0x00C9
    1926:	8f e9       	ldi	r24, 0x9F	; 159
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <CLCD_voidWriteSpecialCharacter>
	CLCD_voidWriteSpecialCharacter(Pad2,PadRight,15,Pad2Y);
    1932:	20 91 ca 00 	lds	r18, 0x00CA
    1936:	87 ea       	ldi	r24, 0xA7	; 167
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	4f e0       	ldi	r20, 0x0F	; 15
    193e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <CLCD_voidWriteSpecialCharacter>
	CLCD_voidWriteSpecialCharacter(Ball,Ball_I,BallX,BallY);
    1942:	20 91 b7 00 	lds	r18, 0x00B7
    1946:	30 91 c8 00 	lds	r19, 0x00C8
    194a:	8f ea       	ldi	r24, 0xAF	; 175
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	62 e0       	ldi	r22, 0x02	; 2
    1950:	42 2f       	mov	r20, r18
    1952:	23 2f       	mov	r18, r19
    1954:	0e 94 8f 07 	call	0xf1e	; 0xf1e <CLCD_voidWriteSpecialCharacter>

	while (1)
	{
		PressedKey=KPD_u8GetPressedKey();
    1958:	0e 94 a8 0b 	call	0x1750	; 0x1750 <KPD_u8GetPressedKey>
    195c:	80 93 cc 00 	sts	0x00CC, r24
		CLCD_voidSendCommand(1);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
		CLCD_voidGoToXY(BallX,BallY);
    1966:	80 91 b7 00 	lds	r24, 0x00B7
    196a:	90 91 c8 00 	lds	r25, 0x00C8
    196e:	69 2f       	mov	r22, r25
    1970:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
		CLCD_voidSendData(Ball_I);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidGoToXY(0,Pad1Y);
    197a:	90 91 c9 00 	lds	r25, 0x00C9
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	69 2f       	mov	r22, r25
    1982:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
		CLCD_voidSendData(PadLeft);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidGoToXY(15,Pad2Y);
    198c:	90 91 ca 00 	lds	r25, 0x00CA
    1990:	8f e0       	ldi	r24, 0x0F	; 15
    1992:	69 2f       	mov	r22, r25
    1994:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
		CLCD_voidSendData(PadRight);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    199e:	fe 01       	movw	r30, r28
    19a0:	e5 58       	subi	r30, 0x85	; 133
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a8 e4       	ldi	r26, 0x48	; 72
    19aa:	b3 e4       	ldi	r27, 0x43	; 67
    19ac:	80 83       	st	Z, r24
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	a2 83       	std	Z+2, r26	; 0x02
    19b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b4:	8e 01       	movw	r16, r28
    19b6:	09 58       	subi	r16, 0x89	; 137
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	fe 01       	movw	r30, r28
    19bc:	e5 58       	subi	r30, 0x85	; 133
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	f8 01       	movw	r30, r16
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e2:	fe 01       	movw	r30, r28
    19e4:	e9 58       	subi	r30, 0x89	; 137
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	44 f4       	brge	.+16     	; 0x1a10 <main+0x110>
		__ticks = 1;
    1a00:	fe 01       	movw	r30, r28
    1a02:	eb 58       	subi	r30, 0x8B	; 139
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	80 83       	st	Z, r24
    1a0e:	64 c0       	rjmp	.+200    	; 0x1ad8 <main+0x1d8>
	else if (__tmp > 65535)
    1a10:	fe 01       	movw	r30, r28
    1a12:	e9 58       	subi	r30, 0x89	; 137
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	3f ef       	ldi	r19, 0xFF	; 255
    1a22:	4f e7       	ldi	r20, 0x7F	; 127
    1a24:	57 e4       	ldi	r21, 0x47	; 71
    1a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	0c f0       	brlt	.+2      	; 0x1a30 <main+0x130>
    1a2e:	43 c0       	rjmp	.+134    	; 0x1ab6 <main+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	fe 01       	movw	r30, r28
    1a32:	e5 58       	subi	r30, 0x85	; 133
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e2       	ldi	r20, 0x20	; 32
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8e 01       	movw	r16, r28
    1a50:	0b 58       	subi	r16, 0x8B	; 139
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	f8 01       	movw	r30, r16
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
    1a66:	1f c0       	rjmp	.+62     	; 0x1aa6 <main+0x1a6>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ed 58       	subi	r30, 0x8D	; 141
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
    1a76:	fe 01       	movw	r30, r28
    1a78:	ed 58       	subi	r30, 0x8D	; 141
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <main+0x180>
    1a84:	fe 01       	movw	r30, r28
    1a86:	ed 58       	subi	r30, 0x8D	; 141
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	de 01       	movw	r26, r28
    1a90:	ab 58       	subi	r26, 0x8B	; 139
    1a92:	bf 4f       	sbci	r27, 0xFF	; 255
    1a94:	fe 01       	movw	r30, r28
    1a96:	eb 58       	subi	r30, 0x8B	; 139
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	9c 93       	st	X, r25
    1aa4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	eb 58       	subi	r30, 0x8B	; 139
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	d1 f6       	brne	.-76     	; 0x1a68 <main+0x168>
    1ab4:	28 c0       	rjmp	.+80     	; 0x1b06 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	8e 01       	movw	r16, r28
    1ab8:	0b 58       	subi	r16, 0x8B	; 139
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	fe 01       	movw	r30, r28
    1abe:	e9 58       	subi	r30, 0x89	; 137
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    1ad8:	de 01       	movw	r26, r28
    1ada:	af 58       	subi	r26, 0x8F	; 143
    1adc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	eb 58       	subi	r30, 0x8B	; 139
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	9c 93       	st	X, r25
    1aec:	8e 93       	st	-X, r24
    1aee:	fe 01       	movw	r30, r28
    1af0:	ef 58       	subi	r30, 0x8F	; 143
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <main+0x1f8>
    1afc:	fe 01       	movw	r30, r28
    1afe:	ef 58       	subi	r30, 0x8F	; 143
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
		_delay_ms(200);

		if(Goal==1)
    1b06:	80 91 cd 00 	lds	r24, 0x00CD
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <main+0x210>
    1b0e:	90 c1       	rjmp	.+800    	; 0x1e30 <main+0x530>
    1b10:	fe 01       	movw	r30, r28
    1b12:	e3 59       	subi	r30, 0x93	; 147
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	aa e7       	ldi	r26, 0x7A	; 122
    1b1c:	b4 e4       	ldi	r27, 0x44	; 68
    1b1e:	80 83       	st	Z, r24
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	a2 83       	std	Z+2, r26	; 0x02
    1b24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	8e 01       	movw	r16, r28
    1b28:	07 59       	subi	r16, 0x97	; 151
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e3 59       	subi	r30, 0x93	; 147
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	a2 83       	std	Z+2, r26	; 0x02
    1b52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 59       	subi	r30, 0x97	; 151
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	44 f4       	brge	.+16     	; 0x1b82 <main+0x282>
		__ticks = 1;
    1b72:	fe 01       	movw	r30, r28
    1b74:	e9 59       	subi	r30, 0x99	; 153
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	64 c0       	rjmp	.+200    	; 0x1c4a <main+0x34a>
	else if (__tmp > 65535)
    1b82:	fe 01       	movw	r30, r28
    1b84:	e7 59       	subi	r30, 0x97	; 151
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
    1b94:	4f e7       	ldi	r20, 0x7F	; 127
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b9c:	18 16       	cp	r1, r24
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <main+0x2a2>
    1ba0:	43 c0       	rjmp	.+134    	; 0x1c28 <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e3 59       	subi	r30, 0x93	; 147
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8e 01       	movw	r16, r28
    1bc2:	09 59       	subi	r16, 0x99	; 153
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	1f c0       	rjmp	.+62     	; 0x1c18 <main+0x318>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	eb 59       	subi	r30, 0x9B	; 155
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	80 83       	st	Z, r24
    1be8:	fe 01       	movw	r30, r28
    1bea:	eb 59       	subi	r30, 0x9B	; 155
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <main+0x2f2>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	eb 59       	subi	r30, 0x9B	; 155
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	de 01       	movw	r26, r28
    1c02:	a9 59       	subi	r26, 0x99	; 153
    1c04:	bf 4f       	sbci	r27, 0xFF	; 255
    1c06:	fe 01       	movw	r30, r28
    1c08:	e9 59       	subi	r30, 0x99	; 153
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	9c 93       	st	X, r25
    1c16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e9 59       	subi	r30, 0x99	; 153
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	d1 f6       	brne	.-76     	; 0x1bda <main+0x2da>
    1c26:	27 c0       	rjmp	.+78     	; 0x1c76 <main+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	8e 01       	movw	r16, r28
    1c2a:	09 59       	subi	r16, 0x99	; 153
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e7 59       	subi	r30, 0x97	; 151
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	f8 01       	movw	r30, r16
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
    1c4a:	de 01       	movw	r26, r28
    1c4c:	ad 59       	subi	r26, 0x9D	; 157
    1c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c50:	fe 01       	movw	r30, r28
    1c52:	e9 59       	subi	r30, 0x99	; 153
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	8d 93       	st	X+, r24
    1c5c:	9c 93       	st	X, r25
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ed 59       	subi	r30, 0x9D	; 157
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <main+0x368>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ed 59       	subi	r30, 0x9D	; 157
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
		{
			_delay_ms(1000);
			CLCD_voidSendCommand(1);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_voidGoToXY(5,0);
    1c7c:	85 e0       	ldi	r24, 0x05	; 5
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
			CLCD_voidWriteString("GOOOOOAL");
    1c84:	80 e6       	ldi	r24, 0x60	; 96
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CLCD_voidWriteString>
			CLCD_voidGoToXY(7,1);
    1c8c:	87 e0       	ldi	r24, 0x07	; 7
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
			ClCD_voidWriteInteger(Player1);
    1c94:	80 91 ce 00 	lds	r24, 0x00CE
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 f8 07 	call	0xff0	; 0xff0 <ClCD_voidWriteInteger>
			CLCD_voidSendData('-');
    1ca0:	8d e2       	ldi	r24, 0x2D	; 45
    1ca2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			ClCD_voidWriteInteger(Player2);
    1ca6:	80 91 cf 00 	lds	r24, 0x00CF
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 f8 07 	call	0xff0	; 0xff0 <ClCD_voidWriteInteger>
			BallX=7;
    1cb2:	87 e0       	ldi	r24, 0x07	; 7
    1cb4:	80 93 b7 00 	sts	0x00B7, r24
			BallY=0;
    1cb8:	10 92 c8 00 	sts	0x00C8, r1
			Pad1Y=0;
    1cbc:	10 92 c9 00 	sts	0x00C9, r1
			Pad2Y=0;
    1cc0:	10 92 ca 00 	sts	0x00CA, r1
			Goal=0;
    1cc4:	10 92 cd 00 	sts	0x00CD, r1
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e1 5a       	subi	r30, 0xA1	; 161
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	aa ef       	ldi	r26, 0xFA	; 250
    1cd4:	b4 e4       	ldi	r27, 0x44	; 68
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	a2 83       	std	Z+2, r26	; 0x02
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	05 5a       	subi	r16, 0xA5	; 165
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e1 5a       	subi	r30, 0xA1	; 161
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	f8 01       	movw	r30, r16
    1d04:	80 83       	st	Z, r24
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	a2 83       	std	Z+2, r26	; 0x02
    1d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e5 5a       	subi	r30, 0xA5	; 165
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	44 f4       	brge	.+16     	; 0x1d3a <main+0x43a>
		__ticks = 1;
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e7 5a       	subi	r30, 0xA7	; 167
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	64 c0       	rjmp	.+200    	; 0x1e02 <main+0x502>
	else if (__tmp > 65535)
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e5 5a       	subi	r30, 0xA5	; 165
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <main+0x45a>
    1d58:	43 c0       	rjmp	.+134    	; 0x1de0 <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e1 5a       	subi	r30, 0xA1	; 161
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8e 01       	movw	r16, r28
    1d7a:	07 5a       	subi	r16, 0xA7	; 167
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	1f c0       	rjmp	.+62     	; 0x1dd0 <main+0x4d0>
    1d92:	fe 01       	movw	r30, r28
    1d94:	e9 5a       	subi	r30, 0xA9	; 169
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	88 ec       	ldi	r24, 0xC8	; 200
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	fe 01       	movw	r30, r28
    1da2:	e9 5a       	subi	r30, 0xA9	; 169
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <main+0x4aa>
    1dae:	fe 01       	movw	r30, r28
    1db0:	e9 5a       	subi	r30, 0xA9	; 169
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	de 01       	movw	r26, r28
    1dba:	a7 5a       	subi	r26, 0xA7	; 167
    1dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e7 5a       	subi	r30, 0xA7	; 167
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	11 96       	adiw	r26, 0x01	; 1
    1dcc:	9c 93       	st	X, r25
    1dce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e7 5a       	subi	r30, 0xA7	; 167
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	d1 f6       	brne	.-76     	; 0x1d92 <main+0x492>
    1dde:	28 c0       	rjmp	.+80     	; 0x1e30 <main+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	8e 01       	movw	r16, r28
    1de2:	07 5a       	subi	r16, 0xA7	; 167
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 5a       	subi	r30, 0xA5	; 165
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	de 01       	movw	r26, r28
    1e04:	ab 5a       	subi	r26, 0xAB	; 171
    1e06:	bf 4f       	sbci	r27, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e7 5a       	subi	r30, 0xA7	; 167
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	11 96       	adiw	r26, 0x01	; 1
    1e14:	9c 93       	st	X, r25
    1e16:	8e 93       	st	-X, r24
    1e18:	fe 01       	movw	r30, r28
    1e1a:	eb 5a       	subi	r30, 0xAB	; 171
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <main+0x522>
    1e26:	fe 01       	movw	r30, r28
    1e28:	eb 5a       	subi	r30, 0xAB	; 171
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
			_delay_ms(2000);
		}


		if(Player1 == 5 || Player2 == 5)
    1e30:	80 91 ce 00 	lds	r24, 0x00CE
    1e34:	85 30       	cpi	r24, 0x05	; 5
    1e36:	29 f0       	breq	.+10     	; 0x1e42 <main+0x542>
    1e38:	80 91 cf 00 	lds	r24, 0x00CF
    1e3c:	85 30       	cpi	r24, 0x05	; 5
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <main+0x542>
    1e40:	49 c3       	rjmp	.+1682   	; 0x24d4 <main+0xbd4>
    1e42:	fe 01       	movw	r30, r28
    1e44:	ef 5a       	subi	r30, 0xAF	; 175
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	aa e7       	ldi	r26, 0x7A	; 122
    1e4e:	b4 e4       	ldi	r27, 0x44	; 68
    1e50:	80 83       	st	Z, r24
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	a2 83       	std	Z+2, r26	; 0x02
    1e56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	8e 01       	movw	r16, r28
    1e5a:	03 5b       	subi	r16, 0xB3	; 179
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ef 5a       	subi	r30, 0xAF	; 175
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4a ef       	ldi	r20, 0xFA	; 250
    1e72:	54 e4       	ldi	r21, 0x44	; 68
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	a2 83       	std	Z+2, r26	; 0x02
    1e84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e86:	fe 01       	movw	r30, r28
    1e88:	e3 5b       	subi	r30, 0xB3	; 179
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	44 f4       	brge	.+16     	; 0x1eb4 <main+0x5b4>
		__ticks = 1;
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e5 5b       	subi	r30, 0xB5	; 181
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
    1eb2:	64 c0       	rjmp	.+200    	; 0x1f7c <main+0x67c>
	else if (__tmp > 65535)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e3 5b       	subi	r30, 0xB3	; 179
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	0c f0       	brlt	.+2      	; 0x1ed4 <main+0x5d4>
    1ed2:	43 c0       	rjmp	.+134    	; 0x1f5a <main+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ef 5a       	subi	r30, 0xAF	; 175
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8e 01       	movw	r16, r28
    1ef4:	05 5b       	subi	r16, 0xB5	; 181
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	1f c0       	rjmp	.+62     	; 0x1f4a <main+0x64a>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e7 5b       	subi	r30, 0xB7	; 183
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	88 ec       	ldi	r24, 0xC8	; 200
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e7 5b       	subi	r30, 0xB7	; 183
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <main+0x624>
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e7 5b       	subi	r30, 0xB7	; 183
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	de 01       	movw	r26, r28
    1f34:	a5 5b       	subi	r26, 0xB5	; 181
    1f36:	bf 4f       	sbci	r27, 0xFF	; 255
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e5 5b       	subi	r30, 0xB5	; 181
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	11 96       	adiw	r26, 0x01	; 1
    1f46:	9c 93       	st	X, r25
    1f48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e5 5b       	subi	r30, 0xB5	; 181
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	d1 f6       	brne	.-76     	; 0x1f0c <main+0x60c>
    1f58:	27 c0       	rjmp	.+78     	; 0x1fa8 <main+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	05 5b       	subi	r16, 0xB5	; 181
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f60:	fe 01       	movw	r30, r28
    1f62:	e3 5b       	subi	r30, 0xB3	; 179
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
    1f7c:	de 01       	movw	r26, r28
    1f7e:	a9 5b       	subi	r26, 0xB9	; 185
    1f80:	bf 4f       	sbci	r27, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	e5 5b       	subi	r30, 0xB5	; 181
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	8d 93       	st	X+, r24
    1f8e:	9c 93       	st	X, r25
    1f90:	fe 01       	movw	r30, r28
    1f92:	e9 5b       	subi	r30, 0xB9	; 185
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <main+0x69a>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e9 5b       	subi	r30, 0xB9	; 185
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
		{
			_delay_ms(1000);
			CLCD_voidSendCommand(1);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_voidGoToXY(4,0);
    1fae:	84 e0       	ldi	r24, 0x04	; 4
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
			CLCD_voidWriteString("END GAME");
    1fb6:	89 e6       	ldi	r24, 0x69	; 105
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CLCD_voidWriteString>
			BallX=7;
    1fbe:	87 e0       	ldi	r24, 0x07	; 7
    1fc0:	80 93 b7 00 	sts	0x00B7, r24
			BallY=0;
    1fc4:	10 92 c8 00 	sts	0x00C8, r1
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ed 5b       	subi	r30, 0xBD	; 189
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	aa ef       	ldi	r26, 0xFA	; 250
    1fd4:	b4 e4       	ldi	r27, 0x44	; 68
    1fd6:	80 83       	st	Z, r24
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	a2 83       	std	Z+2, r26	; 0x02
    1fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	8e 01       	movw	r16, r28
    1fe0:	01 5c       	subi	r16, 0xC1	; 193
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ed 5b       	subi	r30, 0xBD	; 189
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	80 83       	st	Z, r24
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	a2 83       	std	Z+2, r26	; 0x02
    200a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200c:	fe 01       	movw	r30, r28
    200e:	ff 96       	adiw	r30, 0x3f	; 63
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <main+0x732>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9e af       	std	Y+62, r25	; 0x3e
    202e:	8d af       	std	Y+61, r24	; 0x3d
    2030:	46 c0       	rjmp	.+140    	; 0x20be <main+0x7be>
	else if (__tmp > 65535)
    2032:	fe 01       	movw	r30, r28
    2034:	ff 96       	adiw	r30, 0x3f	; 63
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	64 f5       	brge	.+88     	; 0x20a6 <main+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	fe 01       	movw	r30, r28
    2050:	ed 5b       	subi	r30, 0xBD	; 189
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e af       	std	Y+62, r25	; 0x3e
    207a:	8d af       	std	Y+61, r24	; 0x3d
    207c:	0f c0       	rjmp	.+30     	; 0x209c <main+0x79c>
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9c af       	std	Y+60, r25	; 0x3c
    2084:	8b af       	std	Y+59, r24	; 0x3b
    2086:	8b ad       	ldd	r24, Y+59	; 0x3b
    2088:	9c ad       	ldd	r25, Y+60	; 0x3c
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <main+0x78a>
    208e:	9c af       	std	Y+60, r25	; 0x3c
    2090:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d ad       	ldd	r24, Y+61	; 0x3d
    2094:	9e ad       	ldd	r25, Y+62	; 0x3e
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e af       	std	Y+62, r25	; 0x3e
    209a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d ad       	ldd	r24, Y+61	; 0x3d
    209e:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <main+0x77e>
    20a4:	16 c0       	rjmp	.+44     	; 0x20d2 <main+0x7d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	fe 01       	movw	r30, r28
    20a8:	ff 96       	adiw	r30, 0x3f	; 63
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e af       	std	Y+62, r25	; 0x3e
    20bc:	8d af       	std	Y+61, r24	; 0x3d
    20be:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c2:	9a af       	std	Y+58, r25	; 0x3a
    20c4:	89 af       	std	Y+57, r24	; 0x39
    20c6:	89 ad       	ldd	r24, Y+57	; 0x39
    20c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <main+0x7ca>
    20ce:	9a af       	std	Y+58, r25	; 0x3a
    20d0:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);
			if(Player1==5)
    20d2:	80 91 ce 00 	lds	r24, 0x00CE
    20d6:	85 30       	cpi	r24, 0x05	; 5
    20d8:	09 f0       	breq	.+2      	; 0x20dc <main+0x7dc>
    20da:	fc c0       	rjmp	.+504    	; 0x22d4 <main+0x9d4>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	aa e7       	ldi	r26, 0x7A	; 122
    20e2:	b4 e4       	ldi	r27, 0x44	; 68
    20e4:	8d ab       	std	Y+53, r24	; 0x35
    20e6:	9e ab       	std	Y+54, r25	; 0x36
    20e8:	af ab       	std	Y+55, r26	; 0x37
    20ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6d a9       	ldd	r22, Y+53	; 0x35
    20ee:	7e a9       	ldd	r23, Y+54	; 0x36
    20f0:	8f a9       	ldd	r24, Y+55	; 0x37
    20f2:	98 ad       	ldd	r25, Y+56	; 0x38
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a ef       	ldi	r20, 0xFA	; 250
    20fa:	54 e4       	ldi	r21, 0x44	; 68
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	89 ab       	std	Y+49, r24	; 0x31
    2106:	9a ab       	std	Y+50, r25	; 0x32
    2108:	ab ab       	std	Y+51, r26	; 0x33
    210a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    210c:	69 a9       	ldd	r22, Y+49	; 0x31
    210e:	7a a9       	ldd	r23, Y+50	; 0x32
    2110:	8b a9       	ldd	r24, Y+51	; 0x33
    2112:	9c a9       	ldd	r25, Y+52	; 0x34
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <main+0x82e>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <main+0x8ac>
	else if (__tmp > 65535)
    212e:	69 a9       	ldd	r22, Y+49	; 0x31
    2130:	7a a9       	ldd	r23, Y+50	; 0x32
    2132:	8b a9       	ldd	r24, Y+51	; 0x33
    2134:	9c a9       	ldd	r25, Y+52	; 0x34
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <main+0x898>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6d a9       	ldd	r22, Y+53	; 0x35
    2148:	7e a9       	ldd	r23, Y+54	; 0x36
    214a:	8f a9       	ldd	r24, Y+55	; 0x37
    214c:	98 ad       	ldd	r25, Y+56	; 0x38
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	98 ab       	std	Y+48, r25	; 0x30
    216c:	8f a7       	std	Y+47, r24	; 0x2f
    216e:	0f c0       	rjmp	.+30     	; 0x218e <main+0x88e>
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e a7       	std	Y+46, r25	; 0x2e
    2176:	8d a7       	std	Y+45, r24	; 0x2d
    2178:	8d a5       	ldd	r24, Y+45	; 0x2d
    217a:	9e a5       	ldd	r25, Y+46	; 0x2e
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <main+0x87c>
    2180:	9e a7       	std	Y+46, r25	; 0x2e
    2182:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8f a5       	ldd	r24, Y+47	; 0x2f
    2186:	98 a9       	ldd	r25, Y+48	; 0x30
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	98 ab       	std	Y+48, r25	; 0x30
    218c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2190:	98 a9       	ldd	r25, Y+48	; 0x30
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <main+0x870>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <main+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	69 a9       	ldd	r22, Y+49	; 0x31
    219a:	7a a9       	ldd	r23, Y+50	; 0x32
    219c:	8b a9       	ldd	r24, Y+51	; 0x33
    219e:	9c a9       	ldd	r25, Y+52	; 0x34
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	98 ab       	std	Y+48, r25	; 0x30
    21aa:	8f a7       	std	Y+47, r24	; 0x2f
    21ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ae:	98 a9       	ldd	r25, Y+48	; 0x30
    21b0:	9c a7       	std	Y+44, r25	; 0x2c
    21b2:	8b a7       	std	Y+43, r24	; 0x2b
    21b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <main+0x8b8>
    21bc:	9c a7       	std	Y+44, r25	; 0x2c
    21be:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms(1000);
				CLCD_voidSendCommand(1);
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_voidGoToXY(0,0);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
				CLCD_voidWriteString("Player1 is the");
    21ce:	82 e7       	ldi	r24, 0x72	; 114
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CLCD_voidWriteString>
				CLCD_voidGoToXY(4,1);
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
				CLCD_voidWriteString("Winner");
    21de:	81 e8       	ldi	r24, 0x81	; 129
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CLCD_voidWriteString>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	aa e7       	ldi	r26, 0x7A	; 122
    21ec:	b5 e4       	ldi	r27, 0x45	; 69
    21ee:	8f a3       	std	Y+39, r24	; 0x27
    21f0:	98 a7       	std	Y+40, r25	; 0x28
    21f2:	a9 a7       	std	Y+41, r26	; 0x29
    21f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f6:	6f a1       	ldd	r22, Y+39	; 0x27
    21f8:	78 a5       	ldd	r23, Y+40	; 0x28
    21fa:	89 a5       	ldd	r24, Y+41	; 0x29
    21fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a ef       	ldi	r20, 0xFA	; 250
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8b a3       	std	Y+35, r24	; 0x23
    2210:	9c a3       	std	Y+36, r25	; 0x24
    2212:	ad a3       	std	Y+37, r26	; 0x25
    2214:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2216:	6b a1       	ldd	r22, Y+35	; 0x23
    2218:	7c a1       	ldd	r23, Y+36	; 0x24
    221a:	8d a1       	ldd	r24, Y+37	; 0x25
    221c:	9e a1       	ldd	r25, Y+38	; 0x26
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <main+0x938>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9a a3       	std	Y+34, r25	; 0x22
    2234:	89 a3       	std	Y+33, r24	; 0x21
    2236:	3f c0       	rjmp	.+126    	; 0x22b6 <main+0x9b6>
	else if (__tmp > 65535)
    2238:	6b a1       	ldd	r22, Y+35	; 0x23
    223a:	7c a1       	ldd	r23, Y+36	; 0x24
    223c:	8d a1       	ldd	r24, Y+37	; 0x25
    223e:	9e a1       	ldd	r25, Y+38	; 0x26
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	4c f5       	brge	.+82     	; 0x22a2 <main+0x9a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	6f a1       	ldd	r22, Y+39	; 0x27
    2252:	78 a5       	ldd	r23, Y+40	; 0x28
    2254:	89 a5       	ldd	r24, Y+41	; 0x29
    2256:	9a a5       	ldd	r25, Y+42	; 0x2a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9a a3       	std	Y+34, r25	; 0x22
    2276:	89 a3       	std	Y+33, r24	; 0x21
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <main+0x998>
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	98 a3       	std	Y+32, r25	; 0x20
    2280:	8f 8f       	std	Y+31, r24	; 0x1f
    2282:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2284:	98 a1       	ldd	r25, Y+32	; 0x20
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <main+0x986>
    228a:	98 a3       	std	Y+32, r25	; 0x20
    228c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	89 a1       	ldd	r24, Y+33	; 0x21
    2290:	9a a1       	ldd	r25, Y+34	; 0x22
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9a a3       	std	Y+34, r25	; 0x22
    2296:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	69 f7       	brne	.-38     	; 0x227a <main+0x97a>
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <main+0x9ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a2:	6b a1       	ldd	r22, Y+35	; 0x23
    22a4:	7c a1       	ldd	r23, Y+36	; 0x24
    22a6:	8d a1       	ldd	r24, Y+37	; 0x25
    22a8:	9e a1       	ldd	r25, Y+38	; 0x26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9a a3       	std	Y+34, r25	; 0x22
    22b4:	89 a3       	std	Y+33, r24	; 0x21
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	9e 8f       	std	Y+30, r25	; 0x1e
    22bc:	8d 8f       	std	Y+29, r24	; 0x1d
    22be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <main+0x9c2>
    22c6:	9e 8f       	std	Y+30, r25	; 0x1e
    22c8:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(4000);
				Player1=0;
    22ca:	10 92 ce 00 	sts	0x00CE, r1
				Player2=0;
    22ce:	10 92 cf 00 	sts	0x00CF, r1
    22d2:	00 c1       	rjmp	.+512    	; 0x24d4 <main+0xbd4>
			}
			else if(Player2==5)
    22d4:	80 91 cf 00 	lds	r24, 0x00CF
    22d8:	85 30       	cpi	r24, 0x05	; 5
    22da:	09 f0       	breq	.+2      	; 0x22de <main+0x9de>
    22dc:	fb c0       	rjmp	.+502    	; 0x24d4 <main+0xbd4>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	aa e7       	ldi	r26, 0x7A	; 122
    22e4:	b4 e4       	ldi	r27, 0x44	; 68
    22e6:	89 8f       	std	Y+25, r24	; 0x19
    22e8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ea:	ab 8f       	std	Y+27, r26	; 0x1b
    22ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	69 8d       	ldd	r22, Y+25	; 0x19
    22f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a ef       	ldi	r20, 0xFA	; 250
    22fc:	54 e4       	ldi	r21, 0x44	; 68
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	8d 8b       	std	Y+21, r24	; 0x15
    2308:	9e 8b       	std	Y+22, r25	; 0x16
    230a:	af 8b       	std	Y+23, r26	; 0x17
    230c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <main+0xa30>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <main+0xaae>
	else if (__tmp > 65535)
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <main+0xa9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	69 8d       	ldd	r22, Y+25	; 0x19
    234a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9c 8b       	std	Y+20, r25	; 0x14
    236e:	8b 8b       	std	Y+19, r24	; 0x13
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <main+0xa90>
    2372:	88 ec       	ldi	r24, 0xC8	; 200
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9a 8b       	std	Y+18, r25	; 0x12
    2378:	89 8b       	std	Y+17, r24	; 0x11
    237a:	89 89       	ldd	r24, Y+17	; 0x11
    237c:	9a 89       	ldd	r25, Y+18	; 0x12
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <main+0xa7e>
    2382:	9a 8b       	std	Y+18, r25	; 0x12
    2384:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8b 89       	ldd	r24, Y+19	; 0x13
    2388:	9c 89       	ldd	r25, Y+20	; 0x14
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9c 8b       	std	Y+20, r25	; 0x14
    238e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <main+0xa72>
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <main+0xac2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	6d 89       	ldd	r22, Y+21	; 0x15
    239c:	7e 89       	ldd	r23, Y+22	; 0x16
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	98 8b       	std	Y+16, r25	; 0x10
    23b4:	8f 87       	std	Y+15, r24	; 0x0f
    23b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b8:	98 89       	ldd	r25, Y+16	; 0x10
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <main+0xaba>
    23be:	98 8b       	std	Y+16, r25	; 0x10
    23c0:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(1000);
				CLCD_voidSendCommand(1);
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_voidGoToXY(0,0);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
				CLCD_voidWriteString("Player2 is the");
    23d0:	88 e8       	ldi	r24, 0x88	; 136
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CLCD_voidWriteString>
				CLCD_voidGoToXY(4,1);
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidGoToXY>
				CLCD_voidWriteString("Winner");
    23e0:	81 e8       	ldi	r24, 0x81	; 129
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CLCD_voidWriteString>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	aa e7       	ldi	r26, 0x7A	; 122
    23ee:	b5 e4       	ldi	r27, 0x45	; 69
    23f0:	8b 87       	std	Y+11, r24	; 0x0b
    23f2:	9c 87       	std	Y+12, r25	; 0x0c
    23f4:	ad 87       	std	Y+13, r26	; 0x0d
    23f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a ef       	ldi	r20, 0xFA	; 250
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8f 83       	std	Y+7, r24	; 0x07
    2412:	98 87       	std	Y+8, r25	; 0x08
    2414:	a9 87       	std	Y+9, r26	; 0x09
    2416:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <main+0xb3a>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <main+0xbb8>
	else if (__tmp > 65535)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	3f ef       	ldi	r19, 0xFF	; 255
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	57 e4       	ldi	r21, 0x47	; 71
    244a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	4c f5       	brge	.+82     	; 0x24a4 <main+0xba4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	7c 85       	ldd	r23, Y+12	; 0x0c
    2456:	8d 85       	ldd	r24, Y+13	; 0x0d
    2458:	9e 85       	ldd	r25, Y+14	; 0x0e
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	0f c0       	rjmp	.+30     	; 0x249a <main+0xb9a>
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <main+0xb88>
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	69 f7       	brne	.-38     	; 0x247c <main+0xb7c>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <main+0xbcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <main+0xbc4>
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(4000);
				Player1=0;
    24cc:	10 92 ce 00 	sts	0x00CE, r1
				Player2=0;
    24d0:	10 92 cf 00 	sts	0x00CF, r1
			}
		}


		if(moveLeft)
    24d4:	80 91 cb 00 	lds	r24, 0x00CB
    24d8:	88 23       	and	r24, r24
    24da:	e1 f1       	breq	.+120    	; 0x2554 <main+0xc54>
		{
			BallX--;
    24dc:	80 91 b7 00 	lds	r24, 0x00B7
    24e0:	81 50       	subi	r24, 0x01	; 1
    24e2:	80 93 b7 00 	sts	0x00B7, r24
			if(PressedKey==3 && BallY ==1)
    24e6:	80 91 cc 00 	lds	r24, 0x00CC
    24ea:	83 30       	cpi	r24, 0x03	; 3
    24ec:	49 f4       	brne	.+18     	; 0x2500 <main+0xc00>
    24ee:	80 91 c8 00 	lds	r24, 0x00C8
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	29 f4       	brne	.+10     	; 0x2500 <main+0xc00>
			{
				BallY--;
    24f6:	80 91 c8 00 	lds	r24, 0x00C8
    24fa:	81 50       	subi	r24, 0x01	; 1
    24fc:	80 93 c8 00 	sts	0x00C8, r24
			}
			if(PressedKey==9 && BallY==0)
    2500:	80 91 cc 00 	lds	r24, 0x00CC
    2504:	89 30       	cpi	r24, 0x09	; 9
    2506:	49 f4       	brne	.+18     	; 0x251a <main+0xc1a>
    2508:	80 91 c8 00 	lds	r24, 0x00C8
    250c:	88 23       	and	r24, r24
    250e:	29 f4       	brne	.+10     	; 0x251a <main+0xc1a>
			{
				BallY++;
    2510:	80 91 c8 00 	lds	r24, 0x00C8
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	80 93 c8 00 	sts	0x00C8, r24
			}
			if(PressedKey==1 && Pad1Y==1)
    251a:	80 91 cc 00 	lds	r24, 0x00CC
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	49 f4       	brne	.+18     	; 0x2534 <main+0xc34>
    2522:	80 91 c9 00 	lds	r24, 0x00C9
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	29 f4       	brne	.+10     	; 0x2534 <main+0xc34>
			{
				Pad1Y--;
    252a:	80 91 c9 00 	lds	r24, 0x00C9
    252e:	81 50       	subi	r24, 0x01	; 1
    2530:	80 93 c9 00 	sts	0x00C9, r24
			}
			if(PressedKey==7 && Pad1Y==0)
    2534:	80 91 cc 00 	lds	r24, 0x00CC
    2538:	87 30       	cpi	r24, 0x07	; 7
    253a:	09 f0       	breq	.+2      	; 0x253e <main+0xc3e>
    253c:	44 c0       	rjmp	.+136    	; 0x25c6 <main+0xcc6>
    253e:	80 91 c9 00 	lds	r24, 0x00C9
    2542:	88 23       	and	r24, r24
    2544:	09 f0       	breq	.+2      	; 0x2548 <main+0xc48>
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <main+0xcc6>
			{
				Pad1Y++;
    2548:	80 91 c9 00 	lds	r24, 0x00C9
    254c:	8f 5f       	subi	r24, 0xFF	; 255
    254e:	80 93 c9 00 	sts	0x00C9, r24
    2552:	39 c0       	rjmp	.+114    	; 0x25c6 <main+0xcc6>
			}
		}
		else
		{
			BallX++;
    2554:	80 91 b7 00 	lds	r24, 0x00B7
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	80 93 b7 00 	sts	0x00B7, r24
			if(PressedKey==1 && BallY==1)
    255e:	80 91 cc 00 	lds	r24, 0x00CC
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	49 f4       	brne	.+18     	; 0x2578 <main+0xc78>
    2566:	80 91 c8 00 	lds	r24, 0x00C8
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	29 f4       	brne	.+10     	; 0x2578 <main+0xc78>
			{
				BallY--;
    256e:	80 91 c8 00 	lds	r24, 0x00C8
    2572:	81 50       	subi	r24, 0x01	; 1
    2574:	80 93 c8 00 	sts	0x00C8, r24
			}
			if(PressedKey==7 && BallY==0)
    2578:	80 91 cc 00 	lds	r24, 0x00CC
    257c:	87 30       	cpi	r24, 0x07	; 7
    257e:	49 f4       	brne	.+18     	; 0x2592 <main+0xc92>
    2580:	80 91 c8 00 	lds	r24, 0x00C8
    2584:	88 23       	and	r24, r24
    2586:	29 f4       	brne	.+10     	; 0x2592 <main+0xc92>
			{
				BallY++;
    2588:	80 91 c8 00 	lds	r24, 0x00C8
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	80 93 c8 00 	sts	0x00C8, r24
			}
			if(PressedKey==3 && Pad2Y==1)
    2592:	80 91 cc 00 	lds	r24, 0x00CC
    2596:	83 30       	cpi	r24, 0x03	; 3
    2598:	49 f4       	brne	.+18     	; 0x25ac <main+0xcac>
    259a:	80 91 ca 00 	lds	r24, 0x00CA
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	29 f4       	brne	.+10     	; 0x25ac <main+0xcac>
			{
				Pad2Y--;
    25a2:	80 91 ca 00 	lds	r24, 0x00CA
    25a6:	81 50       	subi	r24, 0x01	; 1
    25a8:	80 93 ca 00 	sts	0x00CA, r24
			}
			if(PressedKey==9 && Pad2Y==0)
    25ac:	80 91 cc 00 	lds	r24, 0x00CC
    25b0:	89 30       	cpi	r24, 0x09	; 9
    25b2:	49 f4       	brne	.+18     	; 0x25c6 <main+0xcc6>
    25b4:	80 91 ca 00 	lds	r24, 0x00CA
    25b8:	88 23       	and	r24, r24
    25ba:	29 f4       	brne	.+10     	; 0x25c6 <main+0xcc6>
			{
				Pad2Y++;
    25bc:	80 91 ca 00 	lds	r24, 0x00CA
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	80 93 ca 00 	sts	0x00CA, r24
			}
		}
		if(BallX==0 && BallY==Pad1Y)
    25c6:	80 91 b7 00 	lds	r24, 0x00B7
    25ca:	88 23       	and	r24, r24
    25cc:	71 f4       	brne	.+28     	; 0x25ea <main+0xcea>
    25ce:	90 91 c8 00 	lds	r25, 0x00C8
    25d2:	80 91 c9 00 	lds	r24, 0x00C9
    25d6:	98 17       	cp	r25, r24
    25d8:	41 f4       	brne	.+16     	; 0x25ea <main+0xcea>
		{
			moveLeft=0;
    25da:	10 92 cb 00 	sts	0x00CB, r1
			BallX+=2;
    25de:	80 91 b7 00 	lds	r24, 0x00B7
    25e2:	8e 5f       	subi	r24, 0xFE	; 254
    25e4:	80 93 b7 00 	sts	0x00B7, r24
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <main+0xd12>
		}
		else if(BallX==0 && BallY != Pad1Y)
    25ea:	80 91 b7 00 	lds	r24, 0x00B7
    25ee:	88 23       	and	r24, r24
    25f0:	81 f4       	brne	.+32     	; 0x2612 <main+0xd12>
    25f2:	90 91 c8 00 	lds	r25, 0x00C8
    25f6:	80 91 c9 00 	lds	r24, 0x00C9
    25fa:	98 17       	cp	r25, r24
    25fc:	51 f0       	breq	.+20     	; 0x2612 <main+0xd12>
		{
			Goal=1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	80 93 cd 00 	sts	0x00CD, r24
			moveLeft=0;
    2604:	10 92 cb 00 	sts	0x00CB, r1
			Player2++;
    2608:	80 91 cf 00 	lds	r24, 0x00CF
    260c:	8f 5f       	subi	r24, 0xFF	; 255
    260e:	80 93 cf 00 	sts	0x00CF, r24
		}
		if (BallX==15 && BallY==Pad2Y)
    2612:	80 91 b7 00 	lds	r24, 0x00B7
    2616:	8f 30       	cpi	r24, 0x0F	; 15
    2618:	79 f4       	brne	.+30     	; 0x2638 <main+0xd38>
    261a:	90 91 c8 00 	lds	r25, 0x00C8
    261e:	80 91 ca 00 	lds	r24, 0x00CA
    2622:	98 17       	cp	r25, r24
    2624:	49 f4       	brne	.+18     	; 0x2638 <main+0xd38>
		{
			moveLeft=1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	80 93 cb 00 	sts	0x00CB, r24
			BallX-=2;
    262c:	80 91 b7 00 	lds	r24, 0x00B7
    2630:	82 50       	subi	r24, 0x02	; 2
    2632:	80 93 b7 00 	sts	0x00B7, r24
    2636:	90 c9       	rjmp	.-3296   	; 0x1958 <main+0x58>
		}
		else if (BallX==15 && BallY != Pad2Y)
    2638:	80 91 b7 00 	lds	r24, 0x00B7
    263c:	8f 30       	cpi	r24, 0x0F	; 15
    263e:	09 f0       	breq	.+2      	; 0x2642 <main+0xd42>
    2640:	8b c9       	rjmp	.-3306   	; 0x1958 <main+0x58>
    2642:	90 91 c8 00 	lds	r25, 0x00C8
    2646:	80 91 ca 00 	lds	r24, 0x00CA
    264a:	98 17       	cp	r25, r24
    264c:	09 f4       	brne	.+2      	; 0x2650 <main+0xd50>
    264e:	84 c9       	rjmp	.-3320   	; 0x1958 <main+0x58>
		{
			Goal=1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	80 93 cd 00 	sts	0x00CD, r24
			moveLeft=1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	80 93 cb 00 	sts	0x00CB, r24
			Player1++;
    265c:	80 91 ce 00 	lds	r24, 0x00CE
    2660:	8f 5f       	subi	r24, 0xFF	; 255
    2662:	80 93 ce 00 	sts	0x00CE, r24
    2666:	78 c9       	rjmp	.-3344   	; 0x1958 <main+0x58>

00002668 <__udivmodhi4>:
    2668:	aa 1b       	sub	r26, r26
    266a:	bb 1b       	sub	r27, r27
    266c:	51 e1       	ldi	r21, 0x11	; 17
    266e:	07 c0       	rjmp	.+14     	; 0x267e <__udivmodhi4_ep>

00002670 <__udivmodhi4_loop>:
    2670:	aa 1f       	adc	r26, r26
    2672:	bb 1f       	adc	r27, r27
    2674:	a6 17       	cp	r26, r22
    2676:	b7 07       	cpc	r27, r23
    2678:	10 f0       	brcs	.+4      	; 0x267e <__udivmodhi4_ep>
    267a:	a6 1b       	sub	r26, r22
    267c:	b7 0b       	sbc	r27, r23

0000267e <__udivmodhi4_ep>:
    267e:	88 1f       	adc	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	5a 95       	dec	r21
    2684:	a9 f7       	brne	.-22     	; 0x2670 <__udivmodhi4_loop>
    2686:	80 95       	com	r24
    2688:	90 95       	com	r25
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	08 95       	ret

00002690 <__prologue_saves__>:
    2690:	2f 92       	push	r2
    2692:	3f 92       	push	r3
    2694:	4f 92       	push	r4
    2696:	5f 92       	push	r5
    2698:	6f 92       	push	r6
    269a:	7f 92       	push	r7
    269c:	8f 92       	push	r8
    269e:	9f 92       	push	r9
    26a0:	af 92       	push	r10
    26a2:	bf 92       	push	r11
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	ca 1b       	sub	r28, r26
    26ba:	db 0b       	sbc	r29, r27
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	09 94       	ijmp

000026c8 <__epilogue_restores__>:
    26c8:	2a 88       	ldd	r2, Y+18	; 0x12
    26ca:	39 88       	ldd	r3, Y+17	; 0x11
    26cc:	48 88       	ldd	r4, Y+16	; 0x10
    26ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26da:	b9 84       	ldd	r11, Y+9	; 0x09
    26dc:	c8 84       	ldd	r12, Y+8	; 0x08
    26de:	df 80       	ldd	r13, Y+7	; 0x07
    26e0:	ee 80       	ldd	r14, Y+6	; 0x06
    26e2:	fd 80       	ldd	r15, Y+5	; 0x05
    26e4:	0c 81       	ldd	r16, Y+4	; 0x04
    26e6:	1b 81       	ldd	r17, Y+3	; 0x03
    26e8:	aa 81       	ldd	r26, Y+2	; 0x02
    26ea:	b9 81       	ldd	r27, Y+1	; 0x01
    26ec:	ce 0f       	add	r28, r30
    26ee:	d1 1d       	adc	r29, r1
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	ed 01       	movw	r28, r26
    26fc:	08 95       	ret

000026fe <_exit>:
    26fe:	f8 94       	cli

00002700 <__stop_program>:
    2700:	ff cf       	rjmp	.-2      	; 0x2700 <__stop_program>
